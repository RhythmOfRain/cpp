18. 4Sum   My Submissions QuestionEditorial Solution
Total Accepted: 71010 Total Submissions: 299113 Difficulty: Medium
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ¡Ü b ¡Ü c ¡Ü d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

my solution: 96ms
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> vvi;
        int len = nums.size();
        if(len <= 3)
            return vvi;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < len - 3; ++i){
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(int j = i + 1; j < len - 2; ++j){
                if(j > i + 1 && nums[j] == nums[j - 1]) continue;
                int k = j + 1, n = len - 1;
                int newTarget = target - nums[i] - nums[j];
                while(k < n){
                    if(nums[k] + nums[n] == newTarget){
                        vector<int> vi = {nums[i], nums[j], nums[k], nums[n]};
                        vvi.push_back(vi);
                        ++k; --n;
                        while(k < n && nums[k] == nums[k - 1]) ++k;
                        while(k < n && nums[n] == nums[n + 1]) --n;
                    }
                    else if(nums[k] + nums[n] < newTarget)
                        ++k;
                    else
                        --n;
                }
            }
        }
        return vvi;
        
    }
};