143. Reorder List My Submissions QuestionEditorial Solution
Total Accepted: 68104 Total Submissions: 292637 Difficulty: Medium
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.


my solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    inline ListNode* reverse(ListNode* head){
        if(!head || head -> next == NULL) return head;
        ListNode *cur = head, *move_one = head -> next;
        cur -> next = NULL;
        while(move_one){
            ListNode *move_two = move_one -> next;
            move_one -> next = cur;
            cur = move_one;
            move_one = move_two;
        }
        return cur;
    }
    inline void merge(ListNode* head, ListNode* head2){
        ListNode *p = head, *q = head2;
        while(q){
            ListNode *temp = q;
            q = q -> next;
            temp -> next = p -> next;
            p -> next = temp;
            p = p -> next -> next;
        }
    }
    
public:
    void reorderList(ListNode* head) {
        int count = 0;
        ListNode *p = head;
        while(p){
            ++count;
            p = p -> next;
        }
        if(count < 3) return;
        int half = count % 2 ? count / 2 : count / 2 - 1;
        p = head;
        while(half--)
            p = p -> next;
        ListNode* head2 = reverse(p -> next);
        p -> next = NULL;
        merge(head, head2);
        return;
        
    }
};

思路：
把链表的后半部分逆转，然后把两个链表合并
class Solution {
public:
    void reorderList(ListNode* head) {
        if(!head || !head -> next) return;
        ListNode *fast = head, *slow = head;
        while(fast && fast -> next){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        fast = reverse(slow -> next);
        slow -> next = NULL;
        while(fast){
            ListNode *tmp = fast -> next;
            fast -> next = head -> next;
            head -> next = fast;
            head = head -> next -> next;
            fast = tmp;
        }
        return;
    }
private:
    ListNode* reverse(ListNode *head){
        if(!head || !head -> next) return head;
        ListNode* cur = head -> next;
        head -> next = NULL;
        while(cur){
            ListNode *tmp = cur -> next;
            cur -> next = head;
            head = cur;
            cur = tmp;
        }
        return head;
    }
};