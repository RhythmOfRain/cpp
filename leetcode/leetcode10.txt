10. Regular Expression Matching  QuestionEditorial Solution  My Submissions
Total Accepted: 94461
Total Submissions: 414194
Difficulty: Hard
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ¡ú false
isMatch("aa","aa") ¡ú true
isMatch("aaa","aa") ¡ú false
isMatch("aa", "a*") ¡ú true
isMatch("aa", ".*") ¡ú true
isMatch("ab", ".*") ¡ú true
isMatch("aab", "c*a*b") ¡ú true

my solution:
µÝ¹é
class Solution {
private:
    bool isMatch(const char *s, const char *p){
        if(*p == '\0') return *s == '\0';
        if(*(p + 1) != '*'){
            if(*s != '\0' && (*s == *p || *p == '.'))
                return isMatch(s + 1, p + 1);
            else
                return false;
        }else{
            while(*s != '\0' && (*s == *p || *p == '.')){
                if(isMatch(s, p + 2))
                    return true;
                ++s;
            }
            return isMatch(s, p + 2);
        }
    }

public:
    bool isMatch(string s, string p) {
        return isMatch(s.c_str(),p.c_str());
    }
};