208. Implement Trie (Prefix Tree)  QuestionEditorial Solution  My Submissions
Total Accepted: 44105
Total Submissions: 172886
Difficulty: Medium
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.


my solution:
用三种方法实现，思路一样，只是使用的数据结构不一样，第一种使用vector，第二种使用了unordered_map，第三种使用了固定大小数组，程序运行时间为2 > 1 > 3
class TrieNode {
public:
    // Initialize your data structure here.
    char ch = ' ';
    bool isend = false;
    vector<TrieNode*> children;
    TrieNode() {
    }
    TrieNode(char c):ch(c){}
    TrieNode* substr(char c){
        if(!children.empty()){
            for(auto child : children)
                if(child -> ch == c)
                    return child;
        }
        return nullptr;
    }
    ~TrieNode(){
        for(auto &child : children)
            delete child;
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode *cur = root, *temp = nullptr;
        
        //if(search(word)) return;
        for(auto &e : word){
            if(temp = cur -> substr(e))
                cur = temp;
            else{
                TrieNode *add = new TrieNode(e);
                (cur -> children).push_back(add);
                cur = add;
            }                
                
        }
        cur -> isend = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        TrieNode *cur = root;
        for(auto &e : word){
            cur = cur -> substr(e);
            if(!cur)
                return false;
        }
        return cur -> isend == true;
        
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode *cur = root;
        for(auto &e : prefix){
            cur = cur -> substr(e);
            if(!cur)
                return false;
        }
        return true;
        
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");




第二种：
class TrieNode {
public:
    // Initialize your data structure here.
    char ch = ' ';
    bool isend = false;
    unordered_map<char, TrieNode*> children;
    TrieNode() {
    }
    TrieNode(char c):ch(c){}
    TrieNode* substr(char c){
        if(children.find(c) != children.end())
            return children[c];
        return nullptr;
    }
    ~TrieNode(){
        for(auto &child : children)
            delete child.second;
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode *cur = root, *temp = nullptr;
        
        if(search(word)) return;
        for(auto &e : word){
            if(temp = cur -> substr(e))
                cur = temp;
            else{
                TrieNode *add = new TrieNode(e);
                (cur -> children).insert({e,add});
                cur = add;
            }                
                
        }
        cur -> isend = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        TrieNode *cur = root, *temp = nullptr;
        for(auto &e : word){
            if(temp = cur -> substr(e))
                cur = temp;
            else
                return false;
        }
        return cur -> isend == true;
        
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode *cur = root, *temp = nullptr;
        for(auto &e : prefix){
            if(temp = cur -> substr(e))
                cur = temp;
            else
                return false;
        }
        return true;
        
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");



第三种：
class TrieNode {
public:
    // Initialize your data structure here.
    char ch = ' ';
    bool isend = false;
    TrieNode* children[26] = {nullptr};
    TrieNode() {
    }
    TrieNode(char c):ch(c){}
    TrieNode* substr(char c){
        return children[c- 'a'];
    }
    ~TrieNode(){
        for(int i = 0; i < 26; ++i)
            if(children[i])
                delete children[i];
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode *cur = root, *temp = nullptr;
        
        //if(search(word)) return;
        for(auto &e : word){
            if(temp = cur -> substr(e))
                cur = temp;
            else{
                TrieNode *add = new TrieNode(e);
                (cur -> children)[e - 'a'] = add;
                cur = add;
            }                
                
        }
        cur -> isend = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        TrieNode *cur = root;
        for(auto &e : word){
            cur = cur -> substr(e);
            if(!cur)
                return false;
        }
        return cur -> isend == true;
        
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode *cur = root;
        for(auto &e : prefix){
            cur = cur -> substr(e);
            if(!cur)
                return false;
        }
        return true;
        
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
