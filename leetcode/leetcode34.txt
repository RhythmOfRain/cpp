34. Search for a Range My Submissions QuestionEditorial Solution
Total Accepted: 84241 Total Submissions: 287312 Difficulty: Medium
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

my solution:binary search
错误思路：找到一个target，然后向前向后搜索边界，如果整个数组都是target，则时间复杂度变为O(n)

正确思路：分两步，找到target的first position和last position

类似的题，一个sorted array中target出现了几次，一样的解法


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1, mid = 0;
        while(l <= r){
            mid = l + (r - l) / 2;
            if(nums[mid] == target)
                break;
            if(nums[mid] < target)
                l = mid + 1;
            else
                r = mid - 1;
        }
        if(l > r)
            return vector<int>(2, -1);
        l = r = mid;
        while(r < nums.size() - 1 && nums[r + 1] == target)
            ++r;
        while(l > 0 && nums[l - 1] == target)
            --l;
        vector<int> res = {l, r};
        return res;
    }
};