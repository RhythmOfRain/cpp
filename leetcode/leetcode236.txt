236. Lowest Common Ancestor of a Binary Tree  QuestionEditorial Solution  My Submissions
Total Accepted: 56533
Total Submissions: 194544
Difficulty: Medium
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: ¡°The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).¡±

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

my solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL || p == NULL || q == NULL) return NULL;
        vector<TreeNode*> v1, v2;
        helper(root, p, v1);
        helper(root, q, v2);
        if(v1.empty() || v2.empty()) return NULL;
        int i = 0, len1 = v1.size(), len2 = v2.size();
        for(;i + 1 < len1 && i + 1 < len2 && v1[i + 1] == v2[i + 1];++i);
        return v1[i];
    }
private:
    bool helper(TreeNode* node, TreeNode* target, vector<TreeNode*>& v){
        if(node == NULL)
            return false;
        v.push_back(node);
        if(node == target)
            return true;
        if(helper(node -> left, target, v)) return true;
        if(helper(node -> right, target, v)) return true;
        v.pop_back();
        return false;
    }
};