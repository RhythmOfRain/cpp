138. Copy List with Random Pointer

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

my solution:
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(!head) return head;
        RandomListNode* iter = head;
        while(iter){
            RandomListNode* post = iter -> next;
            RandomListNode* tmp = new RandomListNode(iter -> label);
            tmp -> next = iter -> next;
            iter -> next = tmp;
            iter = post;
        }
        iter = head;
        while(iter){
            if(iter -> random)
                iter -> next -> random = iter -> random -> next;
            iter = iter -> next -> next;
        }
        RandomListNode *res = head -> next, *iter1 = head, *iter2 = res;
        iter = res -> next;
        while(iter){
            iter1 -> next = iter;
            iter1 = iter;
            iter = iter -> next;
            iter2 -> next = iter;
            iter2 = iter;
            iter = iter -> next;
        }
        iter1 -> next = NULL;
        iter2 -> next = NULL;
        return res;
    }
};