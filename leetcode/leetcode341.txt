341. Flatten Nested List Iterator My Submissions QuestionEditorial Solution
Total Accepted: 5375 Total Submissions: 20596 Difficulty: Medium
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].

my solution:stack
构造函数用栈来存储数据，hasNEXT函数很关键，判断栈顶是数字才会返回true
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
private:
    stack<NestedInteger> node_stack;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(int i = nestedList.size() - 1; i >= 0; --i){
                node_stack.push(nestedList[i]);
        }
    }

    int next() {
        NestedInteger temp = node_stack.top();
        node_stack.pop();
        return temp.getInteger();
    }

    bool hasNext() {
        while(!node_stack.empty() && (node_stack.top()).isInteger() != true){
            NestedInteger temp = node_stack.top();
            node_stack.pop();
            vector<NestedInteger> temp_vec = temp.getList();
            for(int i = temp_vec.size() - 1; i >= 0; --i){
                    node_stack.push(temp_vec[i]);
                
            }
        }
        if(node_stack.empty())
            return false;
        return true;
    }

};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */