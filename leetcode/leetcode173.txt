173. Binary Search Tree Iterator   My Submissions QuestionEditorial Solution
Total Accepted: 48110 Total Submissions: 138589 Difficulty: Medium
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.

my solution:
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
private:
    stack<TreeNode*> node_stack;
    void helper(TreeNode *root){
        while(root != NULL){
            node_stack.push(root);
            root = root -> left;
        }
        return;
    }
public:
    BSTIterator(TreeNode *root) {
        helper(root);
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !node_stack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *temp = node_stack.top();
        node_stack.pop();
        helper(temp -> right);
        return temp -> val;
    }
};



/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */