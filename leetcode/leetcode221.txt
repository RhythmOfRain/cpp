221. Maximal Square   My Submissions QuestionEditorial Solution
Total Accepted: 28583 Total Submissions: 121746 Difficulty: Medium
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.

my solution:12ms  dp
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size() == 0)
            return 0;
        vector<vector<int>> dp(matrix.size() + 1, vector<int>(matrix[0].size() + 1, 0));
        int row = matrix.size(), col = matrix[0].size(), result = 0;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(matrix[i][j] == '0')
                    dp[i + 1][j + 1] = 0;
                else{
                    if(dp[i][j + 1] == 0 || dp[i + 1][j] == 0 || dp[i][j] == 0)
                        dp[i + 1][j + 1] = 1;
                    //else if(dp[i][j + 1] == dp[i + 1][j] && dp[i][j] == dp[i + 1][j])
                    //    dp[i + 1][j + 1] = pow(sqrt(dp[i][j])+1,2);
                    else{
                        int min = dp[i][j + 1] <= dp[i + 1][j] ? (dp[i][j + 1] <= dp[i][j] ? dp[i][j+1] : dp[i][j])
                                                                        : (dp[i + 1][j] <= dp[i][j] ? dp[i+1][j] : dp[i][j]);
                        //dp[i + 1][j + 1] = pow(sqrt(min)+1,2);
                        dp[i + 1][j + 1] = min + 2 * sqrt(min) + 1;
                    }
                    if(dp[i + 1][j + 1] > result)
                        result = dp[i + 1][j + 1];
                }
            }
        }
        return result;
    }
};
