74. Search a 2D Matrix My Submissions QuestionEditorial Solution
Total Accepted: 79610 Total Submissions: 234442 Difficulty: Medium
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

my solution:
将矩阵看成一个sorted list进行二分查找
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        /*for(int i = matrix.size() - 1; i >= 0; --i)
           for(int j = matrix[0].size() - 1; j >= 0; --j)
               if(matrix[i][j] == target)
                   return true;
        return false;
        */
        if(matrix.size() == 0 || matrix[0].size() == 0)
            return false;
        int rows = matrix.size(), cols = matrix[0].size();
        int l = 0, r = rows * cols - 1;
        while(l <= r){
            int mid = l + (r - l) / 2;
            int temp = matrix[mid / cols][mid % cols];
            if(temp == target)
                return true;
            if(temp < target)
                l = mid + 1;
            else
                r = mid - 1;
        }
        return false;
    }
};