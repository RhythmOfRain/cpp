83. Remove Duplicates from Sorted List My Submissions QuestionEditorial Solution
Total Accepted: 109391 Total Submissions: 299401 Difficulty: Easy
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.

my solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
//use delete:16ms don't use delete:12ms
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode *temp, *p = head, *pNext = head -> next;
        while(pNext){
            if(pNext -> val == p -> val){
                temp = pNext;
                pNext = pNext -> next;
                delete temp;
                while(pNext && pNext -> val == p -> val){
                    temp = pNext;
                    pNext = pNext -> next;
                    delete temp;
                }
                p -> next = pNext;
            }else{
                p = pNext;
                pNext = pNext -> next;
            }
        }
        return head;
    }
};