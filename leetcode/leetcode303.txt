303. Range Sum Query - Immutable My Submissions QuestionEditorial Solution
Total Accepted: 25303 Total Submissions: 103718 Difficulty: Easy
Given an integer array nums, find the sum of the elements between indices i and j (i ¡Ü j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.

my solution:
¶¯Ì¬¹æ»®
class NumArray {
public:
    NumArray(vector<int> &nums) {
        if(nums.size() == 0)
            sum.push_back(0);
        else{
            sum.resize(nums.size(), 0);
            sum[0] = nums[0];
            int len = nums.size();
            for(int i = 1; i < len; ++i)
                sum[i] = sum[i-1] + nums[i];
        }
    }

    int sumRange(int i, int j) {
        return i == 0 ? sum[j] : sum[j] - sum[i-1];
        
    }
    private:
        vector<int> sum;
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);