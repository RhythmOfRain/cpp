393. UTF-8 Validation

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

For 1-byte character, the first bit is a 0, followed by its unicode code.
For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.
This is how the UTF-8 encoding would work:

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
Given an array of integers representing the data, return whether it is a valid utf-8 encoding.

Note:
The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

Example 1:

data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.

Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
Example 2:

data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.

Return false.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.

my solution:
class Solution {
public:
    bool validUtf8(vector<int>& data) {
        int len = data.size();
	for(int i = 0; i < len; ){
		int temp = data[i] & 0xff;
		if((temp & 0x80) == 0 ){
			++i;
			continue;
		}
		else if((temp & 0xe0) == 0xc0){
			if(i + 1 < len && ins_pre(data, i + 1, 1)){
				i += 2;
				continue;
			}
		}
		else if((temp & 0xf0) == 0xe0){
			if(i + 2 < len && ins_pre(data, i + 1, 2)){
				i += 3;
				continue;
			}
		}
		else if((temp & 0xf8) == 0xf0){
			if(i + 3 < len && ins_pre(data, i + 1, 3)){
				i += 4;
				continue;
			}
		}
		return false;
	}
	return true;
        
    }
bool ins_pre(vector<int>& data, int idx, int num){
	for(int i = 0; i < num; ++i){
		if((data[idx + i] & 0xc0) != 0x80)
			return false;
	}
	return true;
}
};

my solution:
class Solution {
public:
    bool validUtf8(vector<int>& data) {
        int count = 0;
        for (auto c : data) {
	        c &= 0xff;
            if (count == 0) {
                if ((c >> 5) == 0b110) count = 1;
                else if ((c >> 4) == 0b1110) count = 2;
                else if ((c >> 3) == 0b11110) count = 3;
                else if ((c >> 7)) return false;
            } else {
                if ((c >> 6) != 0b10) return false;
                count--;
            }
        }
        return count == 0;
        
    }
};