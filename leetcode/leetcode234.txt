234. Palindrome Linked List My Submissions QuestionEditorial Solution
Total Accepted: 43397 Total Submissions: 156429 Difficulty: Easy
Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?

思路：
首先扫描一遍单链表，统计元素的个数n
然后从n/2的地方开始，将后面的单链表逆序排列，然后比较两个单链表的对应元素是否相等
注意当n为奇数或为偶数时，后移的个数不同

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head -> next == NULL)
            return true;
            
        if(head -> next -> next == NULL){
            if(head -> val == head -> next -> val)
                return true;
            return false;
        }
        int count = 0;
        ListNode *p = head;
        while(p){
            ++count;
            p = p -> next;
        }
        int half = count % 2 ? count / 2 : count / 2 - 1;
        count = 0;
        p = head;
        while(count < half){
            p = p -> next;
            ++count;
        }
        
        ListNode *otherHead = reverse(p -> next);
        p -> next = NULL;
        while(otherHead && head){
            if(otherHead -> val != head -> val)
                return false;
            head = head -> next;
            otherHead = otherHead -> next;
        }
        return true;
    }
public:
    ListNode* reverse(ListNode *head){
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode *p = head, *pN = p -> next, *pNN = NULL;
        p -> next = NULL;
        while(pN){
            pNN = pN -> next;
            pN -> next = p;
            p = pN;
            pN = pNN;
        }
        head = p;
        return head;
    }
};
