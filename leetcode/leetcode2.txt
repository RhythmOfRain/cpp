2. Add Two Numbers My Submissions QuestionEditorial Solution
Total Accepted: 132628 Total Submissions: 584611 Difficulty: Medium
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

my solution:
思路：我的方案是在链表上直接操作，代码太多了，另一个方案是重新生成一个链表，然后计算
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        /*if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        int aCnt = 0, bCnt = 0, cf = 0;//cf means carry flag
        ListNode *p = l1, *q = NULL, *result = NULL;
        while(p){
            ++aCnt;
            p = p -> next;
        }
        p = l2;
        while(p){
            ++bCnt;
            p = p -> next;
        }
        result = aCnt >= bCnt ? l1 : l2;
        if(result == l1){
            p = l1;
            q = l2;
        }else{
            p = l2;
            q = l1;
        }
        while(p->next && q -> next){
            p -> val = p -> val + q -> val + cf;
            cf = p -> val >= 10 ? 1 : 0;
            p -> val %= 10;
            p = p -> next;
            q = q -> next;
        }
        if(p -> next == NULL){
            p -> val = p -> val + q -> val + cf;
            cf = p -> val >= 10 ? 1 : 0;
            p -> val %= 10;
            if(cf == 1){
                ListNode *node = new ListNode(1);
                //node -> val = 1;
                node -> next = p -> next;
                p -> next = node;
            }
        }else{
            p -> val = p -> val + q -> val + cf;
            cf = p -> val >= 10 ? 1 : 0;
            p -> val %= 10;
            p = p -> next;
            while(p -> next && cf){
                p -> val += cf;
                cf = p -> val >= 10 ? 1 : 0;
                p -> val %= 10;
                p = p -> next;
            }
            if(p -> next == NULL){
                p -> val += cf;
                cf = p -> val / 10;
                p -> val %= 10;
                if(cf == 1){
                    ListNode *node = new ListNode(1);
                    // node -> val = 1;
                    node -> next = p -> next;
                    p -> next = node;
            }
            }
        }
        return result;*/
       
   	ListNode *pre = new ListNode(0);
        ListNode *p = pre;
        int cf = 0;//cf means carry flag
        while(l1 || l2 || cf){
            int val1 = l1 ? l1 -> val : 0;
            int val2 = l2 ? l2 -> val : 0;
            int res = val1 + val2 + cf;
            p -> next = new ListNode(res % 10);
            p = p -> next;
            cf = res / 10;
            l1 = l1 ? l1 -> next : l1;
            l2 = l2 ? l2 -> next : l2;
        }
        return pre->next;
    }
};