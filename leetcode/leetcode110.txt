110. Balanced Binary Tree  QuestionEditorial Solution  My Submissions
Total Accepted: 129061
Total Submissions: 366928
Difficulty: Easy
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

方法1：递归
my solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root == NULL) return true;
        int lh = depth(root -> left);
        int rh = depth(root -> right);
        if(lh - rh > 1 || rh -lh > 1)
            return false;
        return isBalanced(root -> left) && isBalanced(root -> right);
            
        
    }
private:
    int depth(TreeNode* root){
        if(root == NULL)
            return 0;
        return max(depth(root -> left), depth(root -> right)) + 1;
    }
};

方法2：采用类似后序遍历的方法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root == NULL)
            return true;
        int depth = 0;
        return helper(root, depth);
        
    }
private:
    bool helper(TreeNode* root, int &depth){
        if(root == NULL){
            depth = 0;
            return true;
        }
        int lh, rh, diff;//lh means leftheight
        if(helper(root -> left, lh) && helper(root -> right, rh)){
            diff = lh - rh;
            if(diff >= -1 && diff <= 1){
                depth = lh > rh ? lh + 1 : rh + 1;
                return true;
            }
        }
        return false;
    }
};
