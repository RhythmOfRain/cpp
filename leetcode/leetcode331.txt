331. Verify Preorder Serialization of a Binary Tree   My Submissions QuestionEditorial Solution
Total Accepted: 11649 Total Submissions: 36752 Difficulty: Medium
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false

my solution:
class Solution {
public:
    bool isValidSerialization(string preorder) {
        stack<string> res;
        vector<string> vs;
        split(preorder, vs);
        int i, len = vs.size();
        for(i = 0; i < len; ++i){
            if(vs[i] != "#")
                res.push(vs[i]);
            else{
                if(!res.empty() && res.top() == "#"){
                    while(!res.empty() && res.top() == "#"){
                        if(res.size() < 2) return false;
                        res.pop();
                        res.pop();
                    }
                    res.push("#");
                }else
                    res.push(vs[i]);
            }
        }
        return res.size() == 1 && res.top() == "#";
        
    }
private:
    void split(string s, vector<string> &vs){
        int begin = 0, i, len = s.size();
        for(i = 0; i < len; ++i){
            if(s[i] == ','){
                vs.push_back(s.substr(begin, i - begin));
                begin = i + 1;
            }
        }
        vs.push_back(s.substr(begin, i - begin));
    }
};