304. Range Sum Query 2D - Immutable   My Submissions QuestionEditorial Solution
Total Accepted: 11674 Total Submissions: 52752 Difficulty: Medium
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12

my solution:
class NumMatrix {
public:
    NumMatrix(vector<vector<int>> &matrix) {
        if(matrix.size() == 0)
            return;   
        mat = matrix;
        int row = matrix.size(), col = matrix[0].size();
        for(int i = 1; i < col; ++i)
            mat[0][i] += mat[0][i - 1];
        for(int i = 1; i < row; ++i)
            mat[i][0] += mat[i - 1][0];
        for(int i = 1; i < row; ++i)
            for(int j = 1; j < col; ++j)
                mat[i][j] += (mat[i-1][j] + mat[i][j-1] - mat[i-1][j-1]);
        
    }

    int sumRegion(int row1, int col1, int row2, int col2) {
            if(row1 - 1 < 0 && col1 - 1 < 0){
				return mat[row2][col2];
			}
			if(row1 - 1 < 0)
				return mat[row2][col2] - mat[row2][col1-1];
			if(col1 - 1 < 0)
				return mat[row2][col2] - mat[row1-1][col2];
            return mat[row2][col2] - mat[row1-1][col2] - mat[row2][col1-1] + mat[row1-1][col1-1];
    }
    private:
        vector<vector<int>> mat;
};


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);