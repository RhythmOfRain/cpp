235. Lowest Common Ancestor of a Binary Search Tree My Submissions QuestionEditorial Solution
Total Accepted: 62391 Total Submissions: 164749 Difficulty: Easy
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

根据BST的性质，如果如果p,q 比root小, 则LCA必定在左子树, 如果p,q比root大, 则LCA必定在右子树. 如果一大一小, 则root即为LCA.
my solution:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q){
        if(root == NULL || p == NULL || q == NULL)
            return NULL;
        if(max(p -> val, q -> val) < root -> val)
            return lowestCommonAncestor(root -> left, p, q);
        if(min(p -> val, q -> val) > root -> val)
            return lowestCommonAncestor(root -> right, p, q);
        return root;
    }
};

还有一种方案，是找到P,Q的路径，然后比较两条路径上最后一个相同的节点即为LCA，该方案针对普通的二叉树
