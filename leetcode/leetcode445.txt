445. Add Two Numbers II

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

my solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        stack<int> s1, s2;
        while(l1){
            s1.push(l1 -> val);
            l1 = l1 -> next;
        }
        while(l2){
            s2.push(l2 -> val);
            l2 = l2 -> next;
        }
        ListNode head(0);
        int carry = 0;
        while(!s1.empty() || !s2.empty() || carry){
            int val1 = 0, val2 = 0;
            if(!s1.empty()){ val1 = s1.top(); s1.pop();}
            if(!s2.empty()){ val2 = s2.top(); s2.pop();}
            int res = val1 + val2 + carry;
            ListNode *node = new ListNode(res % 10);
            carry = res / 10;
            node -> next = head.next;
            head.next = node;
        }
        return head.next;    
    }
};