229. Majority Element II My Submissions QuestionEditorial Solution
Total Accepted: 28737 Total Submissions: 111322 Difficulty: Medium
Given an integer array of size n, find all elements that appear more than  n/3 times. The algorithm should run in linear time and in O(1) space.

my solution:
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        if(nums.size() < 2) 
            return nums;
        vector<int> res;
        int candi_one = nums[0], candi_two = 0, n_times_one = 1, n_times_two = 0;
        int len = nums.size();
        for(int i = 1; i < len; ++i){
            int n = nums[i];
            if(n == candi_one)
                ++n_times_one;
            else if(n == candi_two)
                ++n_times_two;
            else if(n_times_one == 0){
                candi_one = n;
                n_times_one = 1;
            }
            else if(n_times_two == 0){
                candi_two = n;
                n_times_two = 1;
            }
            else{
                --n_times_one;
                --n_times_two;
            }
        }
        n_times_one = n_times_two = 0;
        for(int i = 0; i < len; ++i){
            if(nums[i] == candi_one)
                ++n_times_one;
            else if(nums[i] == candi_two)
                ++n_times_two;
        }
        if(n_times_one > len / 3)
            res.push_back(candi_one);
        if(n_times_two > len / 3)
            res.push_back(candi_two);
        return res;
    }
};