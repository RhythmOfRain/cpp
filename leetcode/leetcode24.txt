24. Swap Nodes in Pairs My Submissions QuestionEditorial Solution
Total Accepted: 89025 Total Submissions: 254881 Difficulty: Easy
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

my solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == NULL)
            return NULL;
        if(head -> next == NULL)
            return head;
        ListNode *first, *second;
        first = head;
        second = first -> next;
        //int temp = 0;
        while(first != NULL && second != NULL){
            //temp = first -> val;
            first -> val = first -> val ^ second -> val;
            second -> val = first -> val ^ second -> val;
            first -> val = first -> val ^ second -> val;
            first = second -> next;
            if(first != NULL)
                second = first -> next;
        }
        return head;
    }
};