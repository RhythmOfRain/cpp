187. Repeated DNA Sequences  QuestionEditorial Solution  My Submissions
Total Accepted: 47712
Total Submissions: 180134
Difficulty: Medium
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,

Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].

my solution:
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> res;
        if(s.size() <= 10)
            return res;
        unordered_map<string, int> count;
        for(int i = 0; i <= s.size() - 10; ++i)
            ++count[s.substr(i,10)];
        for(const auto &e : count){
            if(e.second > 1)
                res.push_back(e.first);
        }
        return res;
    }
};

另一种思路：
下面是一个可行的方案：

字符串中只包含4个字符：A, C, G, T。它们的ASCII码的二进制形式是：

A : 0100 0001
C : 0100 0011
G : 0100 0111
T : 0101 0100
这4个字符的末3位是不同的，因此，我们可以 3个bits 来表示其中的一个字符。
又因为每个子串的长度为10，因此总的位数是：10 x 3 = 30，一个int就足够存放它。
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        if(s.size() <= 10)
            return {};
        unordered_map<int, int> cnt;
        vector<string> res;
        size_t len = s.size(), threshold = len - 9;
        for(size_t i = 0; i < threshold; ++i){
            int hash = 0;
            for(size_t j = i; j < i + 10; ++j){
                hash = ((hash << 3) | (s[j] & 7));
            }
            if(cnt[hash]++ == 1)
                res.push_back(s.substr(i, 10));
        }
        return res;
    }
};

进一步，优化性能
vector<string> findRepeatedDnaSequences(string s) {
    vector<short> hashMap(0xfffff,0);
    vector<string> ans;
    int len = s.size(),hashNum = 0;
    if (len < 11) return ans;
    for (int i = 0;i < 9;++i)
        hashNum = (hashNum << 2) | ((s[i] - 'A' + 1) % 5);
    for (int i = 9;i < len; ++i){
        hashNum = ((hashNum << 2) | ((s[i] - 'A' + 1 ) % 5)) & 0xfffff;
        if (hashMap[hashNum]++ == 1)
	    ans.push_back(s.substr(i-9,10));
   }
    return ans;
}

再进一步，优化性能
a simple solution is only allowing hashMap to has three status, 0 for none, 1 for 1, 3 for multiple.

vector<string> findRepeatedDnaSequences(string s) {
    char flag[262144] ={0};
    vector<string> result;
    int len,DNA=0,i;
    if((len=s.length())< 11) return result;
    for(i = 0 ; i < 9; i++)
        DNA = DNA << 2| (s[i] - 'A' + 1) % 5;
    for(i = 9;i<len;i++)
    {
        DNA = (DNA<<2 & 0xFFFFF)|(s[i] - 'A' + 1)%5;
            if(!(flag[DNA>>2]&(1<<((DNA&3) << 1)))) 
                flag[DNA>>2] |= (1<<((DNA&3) << 1));
            else if(!(flag[DNA>>2]&(2<<((DNA&3) << 1)))) 
            {
                result.push_back(s.substr(i-9,10));
                flag[DNA>>2] |= (2<<((DNA&3) << 1));
            }
    }
    return result;
}