240. Search a 2D Matrix II My Submissions QuestionEditorial Solution
Total Accepted: 36978 Total Submissions: 106781 Difficulty: Medium
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

[思路]
这道题是经典题, 我在微软和YELP的onsite和电面的时候都遇到了. 
从右上角开始, 比较target 和 matrix[i][j]的值. 如果小于target, 则该行不可能有此数,  所以i++; 如果大于target, 则该列不可能有此数, 所以j--. 遇到边界则表明该矩阵不含target.

	if(matrix.size() == 0 || matrix[0].size() == 0)
            return false;
        int i = 0, j = matrix[0].size() - 1, rows = matrix.size();
        while(i < rows && j >= 0){
            if(matrix[i][j] == target) return true;
            else if(matrix[i][j] > target) --j;
            else ++i;
        }
        return false;

