123. Best Time to Buy and Sell Stock III My Submissions QuestionEditorial Solution
Total Accepted: 59500 Total Submissions: 222561 Difficulty: Hard
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

my solution:只能交易两次，且每次只能持有一只股票
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2)
            return 0;
        int len = prices.size();
        vector<int> res1(len, 0),
                    res2(len, 0);
        int min_price = prices[0];
        for(int i = 1; i < len; ++i){
            res1[i] = max(res1[i - 1], prices[i] - min_price);
            min_price = prices[i] < min_price ? prices[i] : min_price;
        }
        int max_price = prices[len - 1];
        for(int i = len - 2; i >=0; --i){
            res2[i] = min(res2[i + 1], prices[i] - max_price);
            max_price = prices[i] > max_price ? prices[i] : max_price;
        }
        int max_profit = res1[0] - res2[0];
        for(int i = 1; i < len; ++i)
            max_profit = res1[i] - res2[i] > max_profit ? res1[i] - res2[i] : max_profit;
        return max_profit;
    }
};