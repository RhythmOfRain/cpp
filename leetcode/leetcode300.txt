300. Longest Increasing Subsequence   My Submissions QuestionEditorial Solution
Total Accepted: 25855 Total Submissions: 75605 Difficulty: Medium
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

my solution:
o(n^2)
依次遍历整个序列，每一次求出从第一个数到当前这个数的最长上升子序列，直至遍历到最后一个数字为止，然后再取dp数组里最大的那个即为整个序列的最长上升子序列。我们用dp[i]来存放序列1-i的最长上升子序列的长度，那么dp[i]=max(dp[j])+1,(j∈[1, i-1]); 显然dp[1]=1,我们从i=2开始遍历后面的元素即可。
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size() <= 1)
            return nums.size();
        int lis = 1, len = nums.size();
        vector<int> dp(nums.size(), 0);
        dp[0] = 1;
        for(int i = 1; i < len; ++i){
            int cur_len = 0;
            for(int j = 0; j < i; ++j){
                if(nums[i] > nums[j] && dp[j] > cur_len)
                    cur_len = dp[j];
            }
            dp[i] = cur_len + 1;
            if(dp[i] > lis)
                lis = dp[i];
        }
        return lis;
    }
};