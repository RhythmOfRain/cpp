32. Longest Valid Parentheses   My Submissions QuestionEditorial Solution
Total Accepted: 62091 Total Submissions: 276468 Difficulty: Hard
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

solution:
对于括号匹配，和Valid Parentheses同样的思路，用栈维护左括号，即在读取字符串的时候，遇到左括号就入栈。遇到右括号就出栈，同时判断当前括号匹配的子串是否为最长子串。

不过在判断括号匹配的子串的长度的时候，有一些值得注意的问题，其中需要借助变量l记录当前括号匹配的子串的左侧位置：

如果当前栈为空，这说明当前的右括号并不构成括号匹配的子串，则l移到下一位置。
如果当前栈不为空，弹出栈顶元素。此时，如果栈为空，说明加上当前的右括号可以构成括号匹配的子串，其子串长度就为l位置到当前位置的长度；如果栈不为空，则栈顶元素后面的括号对肯定是匹配的，因此子串长度就为栈顶元素位置的后一位置到当前位置的长度。
时间复杂度：O(n)

空间复杂度：O(n)

class Solution {
public:
    int longestValidParentheses(string s) {
        int left = 0, max_len = 0, len = s.size();
    	stack<int> si;
    	for(int i = 0; i < len; ++i){
        	if(s[i] == '(') si.push(i);
        	else{
           	    if(si.empty()) left = i + 1;
           	    else{
                	si.pop();
                	if(si.empty())
                    	    max_len = max(max_len, i - left + 1);
                	else
                            max_len = max(max_len, i - si.top());
                    }
        	}
        }
    	return max_len;  
    }
};
