122. Best Time to Buy and Sell Stock II   My Submissions QuestionEditorial Solution
Total Accepted: 84881 Total Submissions: 200972 Difficulty: Medium
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

my solution:
这题目感觉说的不是特别清楚，一开始有点没搞懂意思，后来看了讨论区才发现没有想得那么复杂，大概就是说给了一个list里面是每一天的股价表，我们可以在任意一天买卖，但卖必须要在买之后。并且可以有多笔买卖，让我们求出最大获利。

这题一开始朝了动态规划方向想，大概的感觉划成尽量多的段并且保证每个子段里的收益最大，但后来大概模拟了一下情况感觉应该是满足贪心法则的。

我们可以这么考虑，对于每一笔交易 假设是从i天买入 j天卖出 ，如果有j+1天的价格高于j天，所以肯定是从i到j+1利润更高，同样的如果有第i-1天价格比第i天更低，肯定是从i-1天到j天利润更高。所以是不是对于每一段我们只用找到波谷和波峰，相减就可以了呢？

再分析一下，可以推出一个非常简单的式子，只要后项比前项大，这部分值就一定可以变为利润
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i = 1; i < prices.size(); ++i){
            if(prices[i] > prices[i - 1])
                profit += prices[i] - prices[i - 1];
        }
        return profit;
    }
};