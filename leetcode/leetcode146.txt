146. LRU Cache  QuestionEditorial Solution  My Submissions
Total Accepted: 83417
Total Submissions: 526277
Difficulty: Hard
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

my solution:
总结一下：根据题目的要求，LRU Cache具备的操作：

1）set(key,value)：如果key在hashmap中存在，则先重置对应的value值，然后获取对应的节点cur，将cur节点从链表删除，并移动到链表的头部；若果key在hashmap不存在，则新建一个节点，并将节点放到链表的头部。当Cache存满的时候，将链表最后一个节点删除即可。

2）get(key)：如果key在hashmap中存在，则把对应的节点放到链表头部，并返回对应的value值；如果不存在，则返回-1。

class LRUCache{
public:
    LRUCache(int capacity) {
        maxsize = capacity;
    }
    
    int get(int key) {
        if(umil.find(key) != umil.end()){
            int res = umil[key] -> value;
            ln.erase(umil[key]);
            ln.push_front({key, res});
            umil[key] = ln.begin();
            return res;
        }
        else
            return -1;
    }
    
    void set(int key, int value) {
        if(umil.find(key) != umil.end()){
            ln.erase(umil[key]);
            ln.push_front({key, value});
            umil[key] = ln.begin();
        }else{
            if(umil.size() < maxsize){
                ln.push_front({key, value});
                umil[key] = ln.begin();
            }else{
                umil.erase(ln.back().key);
                ln.pop_back();
                ln.push_front({key, value});
                umil[key] = ln.begin();
            }
        }
    }
private:
    struct Node{
      int key, value; 
      Node(int x, int y):key(x), value(y){}
    };
    unsigned maxsize;
    list<Node> ln;
    unordered_map<int, list<Node>::iterator> umil;
};